/*
 Generated by typeshare 1.7.0
*/

/** Used to determine settings based on which backend crate does what */
export type Backend = 
	/** Is considered an error */
	| { type: "Unknown", content?: undefined }
	| { type: "Auth", content?: undefined }
	| { type: "Builder", content?: undefined }
	| { type: "Deployer", content?: undefined }
	| { type: "Gateway", content?: undefined }
	| { type: "Logger", content?: undefined }
	| { type: "Provisioner", content?: undefined }
	| { type: "ResourceRecorder", content?: undefined }
	| { type: "Runtime", content: string };

export interface LogItem {
	/** Deployment id */
	id: string;
	/** Internal service that produced this log */
	internal_origin: Backend;
	/** Time log was captured */
	timestamp: string;
	/** The log line */
	line: string;
}

export enum DeploymentState {
	Queued = "queued",
	Building = "building",
	Built = "built",
	Loading = "loading",
	Running = "running",
	Completed = "completed",
	Stopped = "stopped",
	Crashed = "crashed",
	Unknown = "unknown",
}

export interface DeploymentInfo {
	id: string;
	service_id: string;
	state: DeploymentState;
	last_update: string;
	git_commit_id?: string;
	git_commit_msg?: string;
	git_branch?: string;
	git_dirty?: boolean;
}

export interface DeploymentRequest {
	data: number[];
	no_test: boolean;
	git_commit_id?: string;
	git_commit_msg?: string;
	git_branch?: string;
	git_dirty?: boolean;
}

export interface ApiError {
	message: string;
	status_code: number;
}

export type ProjectState = 
	| { state: "creating", content: {
	recreate_count: number;
}}
	| { state: "attaching", content: {
	recreate_count: number;
}}
	| { state: "recreating", content: {
	recreate_count: number;
}}
	| { state: "starting", content: {
	restart_count: number;
}}
	| { state: "restarting", content: {
	restart_count: number;
}}
	| { state: "started", content?: undefined }
	| { state: "ready", content?: undefined }
	| { state: "stopping", content?: undefined }
	| { state: "stopped", content?: undefined }
	| { state: "rebooting", content?: undefined }
	| { state: "destroying", content?: undefined }
	| { state: "destroyed", content?: undefined }
	| { state: "errored", content: {
	message: string;
}}
	| { state: "deleted", content?: undefined };

export interface ProjectInfo {
	id: string;
	name: string;
	state: ProjectState;
	idle_minutes?: number;
}

/** Config when creating a new project */
export interface ProjectConfig {
	idle_minutes: number;
}

export interface ServiceResponse {
	id: string;
	name: string;
}

export interface ServiceSummary {
	name: string;
	deployment?: DeploymentInfo;
	uri: string;
}

export type ResourceType = 
	| { type: "database", content: DatabaseType }
	| { type: "secrets", content?: undefined }
	| { type: "staticfolder", content?: undefined }
	| { type: "persist", content?: undefined }
	| { type: "turso", content?: undefined }
	| { type: "metadata", content?: undefined }
	| { type: "custom", content?: undefined };

/** Common type to hold all the information we need for a generic resource */
export interface ResourceInfo {
	/** The type of this resource. */
	type: ResourceType;
	/** The config used when creating this resource. Use the [Self::r#type] to know how to parse this data. */
	config: any;
	/** The data associated with this resource. Use the [Self::r#type] to know how to parse this data. */
	data: any;
}

export type DatabaseType = 
	| { type: "awsrds", content: AwsRdsEngine }
	| { type: "shared", content: SharedEngine };

export enum AwsRdsEngine {
	Postgres = "postgres",
	MySql = "mysql",
	MariaDB = "mariadb",
}

export enum SharedEngine {
	Postgres = "postgres",
	MongoDb = "mongodb",
}

